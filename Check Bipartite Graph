bool dfs(int node, int color , vector<int> col, vector<int>adj[])
{
	col[node] = color;
	for(auto i:adj[node])
	{
		if(col[i] == -1)
		{
			if(dfs(i, !color, col, adj) == false)
			{
				return false;
			}
		}
		else if(col[i] == col[node])
		{
			return false;
		}
	}

	return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	int n = edges.size();
   vector<int> adj[n];
   for(int i=0;i<n;i++)
   {
	   for(int j=0;j<n;j++)
	   {
		   if(edges[i][j] == 1)
		   {
			   adj[i].push_back(j);
			   adj[j].push_back(i);
		   }
	   }
   }
   vector<int> col(n);
   for(int i=0;i<n;i++)
   {
	   col[i] = -1;
   }
   for(int i=0;i<n;i++)
   {
	   if(col[i] == -1)
	   {
		  if( dfs(i, 0, col, adj) == false)
		  {
			  return false;
		  }
	   }
   }

   return true;
}
