#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool leaf(TreeNode<int> * root)
{
    return ((root -> left == NULL)&&(root -> right == NULL));
}
void addleft(TreeNode<int> * root , vector<int>&ans)
{
    TreeNode<int> * curr = root;
    while(curr)
    {
      if (!leaf(curr)) {
        ans.push_back(curr->data);
      }
      if(curr -> left)
      {
          curr = curr -> left;
      }
     else 
      {
        curr = curr->right;
      }
    }
} 
void addlast(TreeNode<int> *root , vector<int> &ans)
{
    if(leaf(root))
    {
        ans.push_back(root -> data);
        return ;
    }
    if(root -> left)
    {
        addlast(root -> left, ans);
    }
    if (root->right) {
      addlast(root->right, ans);
    }
}
void addright(TreeNode<int> *root  , vector<int> &ans)
{
   TreeNode<int> *curr = root;
   vector<int> v;
   while(curr)
   {
       if(!leaf(curr))
       {
           v.push_back(curr -> data);
       }

       if(curr -> right)
       {
           curr = curr -> right;
       }
       else 
       {
           curr = curr -> left;
       }
   }

   for(int i=v.size()-1;i>=0;i--)
   {
       ans.push_back(v[i]);
   }
}
vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> ans;
    if(root == NULL)
    {
        return ans;
    }

    if(!leaf(root))
    {
        ans.push_back(root -> data);
    }

    addleft(root->left , ans);
    addlast(root , ans);
    addright(root->right, ans);

    return ans;
}
